plugins {
    id 'com.android.application'
}
project.ext.modelAssetsDir = new File((File) project.buildDir, '../src/main/assets')

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    flavorDimensions 'default'

    defaultConfig {
        applicationId "com.colinelliott.newscratch"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        resources {
            excludes += ['LICENSE.txt', 'META-INF/LICENSE', 'META-INF/NOTICE', 'META-INF/DEPENDENCIES']
        }
    }
    buildFeatures {
        viewBinding true
    }
}


configurations {
    appConfig
}

dependencies {
    implementation 'com.notch.sdk:sdk-android:1.1.355'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    appConfig 'com.notch.sdk:sdk-android:1.1.355'

    implementation 'androidx.appcompat:appcompat:1.3.0'
    //Room and database
    implementation 'com.google.android.material:material:1.3.0'
    implementation'androidx.cardview:cardview'

    def room_version = "2.3.0"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // optional - RxJava2 support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - RxJava3 support for Room
    implementation "androidx.room:room-rxjava3:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'com.afollestad.material-dialogs:core:2.8.1'
}

/*task convertObj(type: JavaExec) {
    ext.srcFile1 = file('../model/equipment_tutorial.obj')
    ext.srcFile2 = file('../model/equipment_tutorial.js')
    inputs.files files(srcFile1,srcFile2)
    outputs.dir project.modelAssetsDir

    main = 'com.wearnotch.visualiserutil.ObjConverter'
    classpath = configurations.appConfig
    args = [ srcFile1.getAbsolutePath(), srcFile2.getAbsolutePath(),
             new File((File) project.modelAssetsDir, 'equipment.dat').getAbsolutePath() ]
}

task convertMtl(type: JavaExec) {
    ext.srcFile = file('../model/equipment_tutorial.mtl')
    inputs.file srcFile
    outputs.dir project.modelAssetsDir

    main = 'com.wearnotch.visualiserutil.MtlConverter'
    classpath = configurations.appConfig
    args = [ srcFile.getAbsolutePath(),
             new File((File) project.modelAssetsDir, 'equipment_mtl.dat').getAbsolutePath() ]
}

project.afterEvaluate {
    project.tasks.findAll {
        it.name.startsWith('generate') && it.name.endsWith('Assets')
    }.each {
        it.dependsOn convertObj
        it.dependsOn convertMtl
    }
}*/
/*task convertObj(type: JavaExec) {
    ext.srcFile1 = file('../model/equipment_tutorial.obj')
    ext.srcFile2 = file('../model/equipment_tutorial.js')
    inputs.files files(srcFile1,srcFile2)
    outputs.dir project.modelAssetsDir

    main = 'com.wearnotch.visualiserutil.ObjConverter'
    classpath = configurations.appConfig
    args = [ srcFile1.getAbsolutePath(), srcFile2.getAbsolutePath(),
             new File((File) project.modelAssetsDir, 'equipment.dat').getAbsolutePath() ]
}
task convertMtl(type: JavaExec) {
    ext.srcFile = file('../model/equipment_tutorial.mtl')
    inputs.file srcFile
    outputs.dir project.modelAssetsDir

    main = 'com.wearnotch.visualiserutil.MtlConverter'
    classpath = configurations.appConfig
    args = [ srcFile.getAbsolutePath(),
             new File((File) project.modelAssetsDir, 'equipment_mtl.dat').getAbsolutePath() ]
}


project.afterEvaluate {
    project.tasks.findAll {
        it.name.startsWith('generate') && it.name.endsWith('Assets')
    }.each {
        it.dependsOn convertObj
        it.dependsOn convertMtl
    }
}*/
